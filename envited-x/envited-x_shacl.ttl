@prefix envited-x: <https://ontologies.envited-x.net/envited-x/v2/ontology#> .
@prefix manifest: <https://ontologies.envited-x.net/manifest/v4/ontology#> .
@prefix gx: <https://registry.lab.gaia-x.eu/development/api/trusted-shape-registry/v1/shapes/jsonld/trustframework#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .


# envited-x SHACL shape
envited-x:SimulationAssetShape a sh:NodeShape ;
    sh:closed false ;
    sh:ignoredProperties ( rdf:type ) ;
    sh:property [
        sh:path envited-x:hasDataResource ;
        sh:node envited-x:DataResourceShape ;
        sh:minCount 1 ;
        sh:maxCount 1 ; # Exactly ONE DataResource per SimulationAsset
        sh:message "Each SimulationAsset must have exactly one associated DataResource, which provides essential metadata such as name and description."@en ;
    ] ;
    sh:property [
        sh:path envited-x:hasDataResourceExtension ;
        sh:node envited-x:DataResourceExtensionShape ;
        sh:minCount 0 ;  # Optional
        sh:message """A SimulationAsset may have one or more DataResourceExtensions (e.g., georeference metadata, sensor calibration) 
                      to provide additional structured metadata. These extensions do not represent standalone retrievable data assets."""@en ;
    ] ;
    sh:property [
        sh:path envited-x:hasManifest ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            ## Case 1: Inline manifest must conform to both required shapes
            [ sh:and (
                [ sh:node manifest:ManifestShape ]
                [ sh:node envited-x:ManifestShape ]
            )]
            
            ## Case 2: Linked manifest reference
            [ sh:and (
                [ sh:node manifest:LinkShape ]
                [ sh:node envited-x:ExtendedLinkShape ]
            )]
        ) ;
        sh:message "Each SimulationAsset must have exactly one manifest, either inline (conforming to both manifest:ManifestShape and envited-x:ManifestShape) or via link (manifest:LinkShape)."@en ;
    ] ;
    sh:targetClass envited-x:SimulationAsset .


envited-x:ExtendedLinkShape a sh:NodeShape ;
  sh:property [
    sh:path manifest:hasAccessRole ;
    sh:in ( envited-x:isPublic envited-x:isOwner envited-x:isRegistered ) ;
    sh:message "Access role must be one of the envited‑x defined access roles." ;
  ] ;
  sh:property [
    sh:path manifest:hasCategory ;
    sh:in (
      envited-x:isManifest
      envited-x:isLicense
      envited-x:isMiscellaneous
      envited-x:isSimulationData
      envited-x:isReferencedSimulationData
      envited-x:isDocumentation
      envited-x:isMedia
      envited-x:isMetadata
      envited-x:isValidationReport
    ) ;
    sh:message "Category must be one of the envited‑x defined categories." ;
  ] .

  
# Manifest Shape for additional constraints
envited-x:ManifestShape a sh:NodeShape ;
    sh:closed false ;
    sh:property [
        sh:path rdf:type ;
        sh:hasValue envited-x:Manifest ;
        sh:message "The manifest node must be explicitly typed as envited-x:Manifest."@en ;
    ] ;
    # Property shape for artifact links:
    sh:property [
        sh:path manifest:hasManifestReference ;
        sh:qualifiedValueShape [
            sh:node [ 
            sh:and ( manifest:LinkShape envited-x:ExtendedLinkShape )
            ] ;
        ] ;
        sh:qualifiedMinCount 1 ;
        sh:message "An envited-x manifest must contain at least one manifest reference link with an envited-x access role and category."@en ;
    ] ;
    sh:property [
        sh:path manifest:hasLicense ;
        sh:qualifiedValueShape [
            sh:node manifest:LicenseShape ;
            sh:property [
                sh:path manifest:licenseData ;
                sh:qualifiedValueShape [
                    sh:node [ 
                    sh:and ( manifest:LinkShape envited-x:ExtendedLinkShape )
                    ] ;
                ] ;
                sh:qualifiedMinCount 1 ;
                sh:message "A license must contain at least one link with an envited-x access role and category."@en ;
            ]
        ] ;
        sh:qualifiedMinCount 1 ;
        sh:message "An envited-x manifest must contain at least one license link with an envited-x access role and category."@en ;
    ] ;
    
    # Property shape for artifact links:
    sh:property [
        sh:path manifest:hasArtifacts ;
        sh:qualifiedValueShape [
            sh:node [ 
            sh:and ( manifest:LinkShape envited-x:ExtendedLinkShape )
            ] ;
        ] ;
        sh:qualifiedMinCount 1 ;
        sh:message "An envited-x manifest must contain at least one artifact link with an envited-x access role and category."@en ;
    ] ;
    # Property shape for external artifact links:
    sh:property [
        sh:path manifest:hasExternalArtifacts ;
        sh:qualifiedValueShape [
            sh:node [ 
            sh:and ( manifest:LinkShape envited-x:ExtendedLinkShape )
            ] ;
        ] ;
        sh:qualifiedMinCount 0 ;
        sh:message "If provided, external artifact links must have an envited-x access role and category."@en ;
    ] ;
    ## Ensure at least one `manifest:Link` for each required category
    sh:property [
        sh:path manifest:hasArtifacts ;
        sh:qualifiedValueShape [
            sh:node manifest:LinkShape ;
            sh:property [
                sh:path manifest:hasCategory ;
                sh:hasValue envited-x:isSimulationData ;
            ]
        ] ;
        sh:qualifiedMinCount 1 ;
        sh:message "The envited-x:Manifest must contain at least 1 manifest:Link with category 'Simulation Data'."@en ;
    ] ;

    sh:property [
        sh:path manifest:hasArtifacts ;
        sh:qualifiedValueShape [
            sh:node manifest:LinkShape ;
            sh:property [
                sh:path manifest:hasCategory ;
                sh:hasValue envited-x:isDocumentation ;
            ]
        ] ;
        sh:qualifiedMinCount 1 ;
        sh:message "The envited-x:Manifest must contain at least 1 manifest:Link with category 'Documentation'."@en ;
    ] ;

    sh:property [
        sh:path manifest:hasArtifacts ;
        sh:qualifiedValueShape [
            sh:node manifest:LinkShape ;
            sh:property [
                sh:path manifest:hasCategory ;
                sh:hasValue envited-x:isMetadata ;
            ]
        ] ;
        sh:qualifiedMinCount 1 ;
        sh:message "The envited-x:Manifest must contain at least 1 manifest:Link with category 'Metadata'."@en ;
    ] ;

    sh:property [
        sh:path manifest:hasArtifacts ;
        sh:qualifiedValueShape [
            sh:node manifest:LinkShape ;
            sh:property [
                sh:path manifest:hasCategory ;
                sh:hasValue envited-x:isMedia ;
            ]
        ] ;
        sh:qualifiedMinCount 1 ;
        sh:message "The envited-x:Manifest must contain at least 1 manifest:Link with category 'Media'."@en ;
    ] ;

    sh:targetClass envited-x:Manifest .


# SHACL Shape for envited-x:DataResource
envited-x:DataResourceShape a sh:NodeShape ;
    sh:closed false ;
    sh:ignoredProperties ( rdf:type ) ;
    sh:property [ 
        sh:path gx:name ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each SimulationAsset must have a human-readable name of the entity."@en ;
        skos:example "3D Model of Grafing"@en ;
        sh:order 0 
    ] ;
    sh:property [ 
        sh:path gx:description ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each SimulationAsset must have a textual description of the entity."@en ;
        skos:example "Town district with traffic signs."@en ;
        sh:order 1 
    ] ;
    sh:targetClass envited-x:DataResource .

# SHACL Shape for envited-x:DataResourceExtension
envited-x:DataResourceExtensionShape a sh:NodeShape ;
    sh:closed false ;
    sh:ignoredProperties ( rdf:type ) ;
    # Constraint to ensure at least one hasContent and one hasFormat
    sh:property [
        sh:path envited-x:hasContent ;
        sh:minCount 1 ;  # At least one hasContent must be present
    ] ;
    sh:property [
        sh:path envited-x:hasFormat ;
        sh:minCount 1 ;  # At least one hasFormat must be present
    ] ;

    # Check for subclasses of DataResourceExtension
    sh:property [
        sh:path envited-x:hasDataResourceExtension ;  # Assuming this is the property linking to subclasses
        sh:node [
            a sh:NodeShape ;
            sh:targetClass envited-x:DataResourceExtension ;  # Targeting the DataResourceExtension class
            sh:property [
                sh:path envited-x:hasContent ;
                sh:minCount 1 ;  # At least one hasContent must be present
            ] ;
            sh:property [
                sh:path envited-x:hasFormat ;
                sh:minCount 1 ;  # At least one hasFormat must be present
            ] ;
        ]
    ] ;
    sh:targetClass envited-x:DataResourceExtension .


# Minimal SHACL shape for envited-x:Content
envited-x:ContentShape a sh:NodeShape ;
    sh:closed false ;
    sh:ignoredProperties ( rdf:type ) ;
    sh:message "Node must be of type envited-x:Content." ;
    sh:targetClass envited-x:Content .

# Minimal SHACL shape for envited-x:DataSource
envited-x:DataSourceShape a sh:NodeShape ;
    sh:closed false ;
    sh:ignoredProperties ( rdf:type ) ;
    sh:message "Node must be of type envited-x:DataSource." ;
    sh:targetClass envited-x:DataSource .

# Minimal SHACL shape for envited-x:Format
envited-x:FormatShape a sh:NodeShape ;
    sh:closed false ;
    sh:ignoredProperties ( rdf:type ) ;
    sh:message "Node must be of type envited-x:Format." ;
    sh:targetClass envited-x:Format .

# Minimal SHACL shape for envited-x:Quality
envited-x:QualityShape a sh:NodeShape ;
    sh:closed false ;
    sh:ignoredProperties ( rdf:type ) ;
    sh:message "Node must be of type envited-x:Quality." ;
    sh:targetClass envited-x:Quality .

# Minimal SHACL shape for envited-x:Quantity
envited-x:QuantityShape a sh:NodeShape ;
    sh:closed false ;
    sh:ignoredProperties ( rdf:type ) ;
    sh:message "Node must be of type envited-x:Quantity." ;
    sh:targetClass envited-x:Quantity .
